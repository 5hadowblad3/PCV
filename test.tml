typedef semaphore {
	int cpt;
};

typedef cyclicbarrier {
	int total;
	semaphore s;
	int nready;
	bool broken;
};

inline new(c, v) {
	c.total = v;
	c.broken = false;
	c.s.cpt = 1; 
	c.nready = 0;
};

inline recv (c) {
	atomic {
		(c.s.cpt > 0) -> c.s.cpt--;
	}
};

inline release (c) {
	atomic {
		c.s.cpt++;
	}
};

inline await(c) {
	
	c.nready++;
	
	(c.nready == c.total) -> skip;
	
}

inline getNumberWaiting(c, res) {
	res = c.nready;
}

inline getParties(c, res) {
	res = c.total;
}

inline isBroken(c, res) {
	res = c.broken;
}

inline reset(c) {
	if 
		::(c.nready > 0 && c.nready < c.total) ->
			broken = true;
			printf("BrokenBarrierException: Some process is waiting!\n");
		::else skip;		
	fi;

	c.broken = false;
	c.nready = 0;
}


cyclicbarrier ca;
proctype productor() 
{
	int cnt = 0;

	do
	:: (cnt == 1) -> 
		await(ca);
		break;
	::else cnt++;
	od;
	printf("Number %d thread is finish\n", _pid);
}	


init {
	
	new(ca, 3);
	atomic {	
		run productor();
		run productor();
		run productor();
	}	
}
 

